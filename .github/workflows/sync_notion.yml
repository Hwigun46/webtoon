name: Sync GitHub Issues to Notion (Spring)

on:
  issues:
    types: [opened, closed]  # 🎯 "opened" (이슈 생성) + "closed" (이슈 닫힘) 함께 처리

jobs:
  sync_issue:
    if: github.event.action == 'opened'  # 🎯 이슈 생성 처리
    runs-on: ubuntu-latest
    steps:
      - name: Send Issue to Notion
        run: |
          response=$(curl -X POST "https://api.notion.com/v1/pages" \
          -H "Authorization: Bearer ${{ secrets.NOTION_API_KEY }}" \
          -H "Content-Type: application/json" \
          -H "Notion-Version: 2022-06-28" \
          --data '{
            "parent": { "database_id": "${{ secrets.NOTION_DATABASE_ID }}" },
            "properties": {
              "제목": { "title": [{ "text": { "content": "${{ github.event.issue.title }}" } }] },
              "내용": { "rich_text": [{ "type": "text", "text": { "content": "${{ github.event.issue.body }}" } }] },
              "URL": { "url": "${{ github.event.issue.html_url }}" },
              "상태": { "status": { "name": "작업 중" } },
              "팀": { "select": { "name": "SPRING" } },
              "담당자": { "rich_text": [{ "type": "text", "text": { "content": "${{ github.event.issue.user.login }}" } }] }
            }
          }')
          echo "Notion API Response: $response"

          # 🎯 Notion에서 생성된 page_id를 가져와서 GitHub 환경 변수로 설정
          page_id=$(echo "$response" | jq -r '.id')
          echo "NOTION_PAGE_ID=$page_id" >> $GITHUB_ENV

  update_issue:
    if: github.event.action == 'closed'  # 🎯 이슈 닫힘 처리
    runs-on: ubuntu-latest
    steps:
      - name: Update Issue Status in Notion
        run: |
          curl -X PATCH "https://api.notion.com/v1/pages/${{ env.NOTION_PAGE_ID }}" \
          -H "Authorization: Bearer ${{ secrets.NOTION_API_KEY }}" \
          -H "Content-Type: application/json" \
          -H "Notion-Version: 2022-06-28" \
          --data '{
            "properties": {
              "상태": { "status": { "name": "완료" } }
            }
          }'